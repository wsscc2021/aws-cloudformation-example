
Parameters:
  AutoScalingGroupName:
    Type: String
    Description: "The Name of Auto Scaling Group"
    Default: cfn-example-asg

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "The Subnet Ids for launched instances"

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "The Security Group Ids for launched instances"

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The Keypair for launched instances"

  AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: "The AMI for launched instances"
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  Project:
    Type: String
    Description: "The project name for provisioned this resources"
    Default: Unicorn.Rental

  Owner:
    Type: String
    Description: "The team name for owned this resources"
    Default: TeamKorea

Resources:
  #
  # IAM Role
  #
  Role:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub '${AutoScalingGroupName}-role'
      Description: !Sub "The role for ${AutoScalingGroupName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
      # Policies: 
      #   - PolicyName: dynamodb-query
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'dynamodb:Query'
      #             - 'dynamodb:Scan'
      #           Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags: 
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  #
  # IAM Instance Profile
  #
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Role
    Properties: 
      # InstanceProfileName: example-ec2-instance-profile
      Path: /
      Roles: 
        - !Ref Role

  #
  # LaunchTemplate
  #
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${AutoScalingGroupName}-lt"
      TagSpecifications: 
        - ResourceType: launch-template
          Tags: 
          - Key: Name
            Value: !Sub "${AutoScalingGroupName}-lt"
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - DeviceName: /dev/xvda
            Ebs: 
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 10
              Iops: 3000
              Throughput: 125
              Encrypted: true
              # KmsKeyId: String
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
          # Name: String
        ImageId: !Ref AMI
        InstanceInitiatedShutdownBehavior: terminate # stop , terminate
        InstanceType: t3.small
        KeyName: !Ref KeyPair
        Monitoring: # detailed monitoring
          Enabled: true 
        SecurityGroupIds: !Ref SecurityGroupIds
        TagSpecifications: 
          - ResourceType: instance # instance, volume
            Tags: 
            - Key: Name
              Value: !Sub "${AutoScalingGroupName}-ec2"
            - Key: Project
              Value: !Ref Project
            - Key: Owner
              Value: !Ref Owner
          - ResourceType: volume # instance, volume
            Tags: 
            - Key: Name
              Value: !Sub "${AutoScalingGroupName}-ec2"
            - Key: Project
              Value: !Ref Project
            - Key: Owner
              Value: !Ref Owner
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Get the latest cloudformation package
            yum update -y aws-cfn-bootstrap
            # Get the latest cloudwatch-agent package
            rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchTemplate --region ${AWS::Region} --configsets default
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource LaunchTemplate --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          # These scripts will run during the instance launch triggered by the userData
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          # These scripts will run during an update of the instance metadata = stack update.
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchTemplate --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            '/lib/systemd/system/cfn-hup.service':
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: |
                systemctl start cfn-hup.service
        # Definition of json configuration of AmazonCloudWatchAgent
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "aggregation_dimensions" : [["AutoScalingGroupName"]],
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
  
  #
  # Auto Scaling Group
  #
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Ref AutoScalingGroupName
      # CapacityRebalance: Boolean
      Cooldown: '120'
      DesiredCapacityType: units # units , vcpu , memory-mib
      DesiredCapacity: '2'
      MinSize: '2'
      MaxSize: '20'
      HealthCheckGracePeriod: 60
      HealthCheckType: EC2 # EC2 , ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber # DefaultVersionNumber , LatestVersionNumber
      Tags: 
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub "${AutoScalingGroupName}-ec2"
      # TargetGroupARNs: 
      #   - String
      VPCZoneIdentifier: !Ref SubnetIds