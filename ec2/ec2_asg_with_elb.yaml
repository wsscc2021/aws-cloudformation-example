
Parameters:
  AutoScalingGroupName:
    Type: String
    Description: "The Name of Auto Scaling Group"
    Default: cfn-example-asg

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "The Subnet Ids for launched instances"

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "The Security Group Ids for launched instances"

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The Keypair for launched instances"

  AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: "The AMI for launched instances"
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  TargetGroupARNs:
    Type: CommaDelimitedList
    Description: "The Target Group Arns that will be attached instance to alb"

  Project:
    Type: String
    Description: "The project name for provisioned this resources"
    Default: Unicorn.Rental

  Owner:
    Type: String
    Description: "The team name for owned this resources"
    Default: TeamKorea

Resources:
  #
  # IAM Role
  #
  Role:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: example-ec2-role
      # Description: description
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
      # Policies: 
      #   - PolicyName: dynamodb-query
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'dynamodb:Query'
      #             - 'dynamodb:Scan'
      #           Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags: 
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  #
  # IAM Instance Profile
  #
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Role
    Properties: 
      # InstanceProfileName: example-ec2-instance-profile
      Path: /
      Roles: 
        - !Ref Role

  #
  # LaunchTemplate
  #
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${AutoScalingGroupName}-lt"
      TagSpecifications: 
        - ResourceType: launch-template
          Tags: 
          - Key: Name
            Value: !Sub "${AutoScalingGroupName}-lt"
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - DeviceName: /dev/xvda
            Ebs: 
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 10
              Iops: 3000
              Throughput: 125
              Encrypted: true
              # KmsKeyId: String
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
          # Name: String
        ImageId: !Ref AMI
        InstanceInitiatedShutdownBehavior: terminate # stop , terminate
        InstanceType: t3.small
        KeyName: !Ref KeyPair
        Monitoring: # detailed monitoring
          Enabled: true 
        SecurityGroupIds: !Ref SecurityGroupIds
        TagSpecifications: 
          - ResourceType: instance # instance, volume
            Tags: 
            - Key: Name
              Value: !Sub "${AutoScalingGroupName}-ec2"
            - Key: Project
              Value: !Ref Project
            - Key: Owner
              Value: !Ref Owner
          - ResourceType: volume # instance, volume
            Tags: 
            - Key: Name
              Value: !Sub "${AutoScalingGroupName}-ec2"
            - Key: Project
              Value: !Ref Project
            - Key: Owner
              Value: !Ref Owner
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum install -y httpd
            cat << EOF >> /var/www/html/index.html
            <html>
              <body>
                <h1>Auto Scaling Group Demo</h1>
                <p>This is example page for auto scaling group demonstration</p>
              </body>
            </html>
            EOF
            systemctl enable httpd.service
            systemctl start httpd.service
  
  #
  # Auto Scaling Group
  #
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Ref AutoScalingGroupName
      # CapacityRebalance: Boolean
      Cooldown: '120'
      DesiredCapacityType: units # units , vcpu , memory-mib
      DesiredCapacity: '2'
      MinSize: '2'
      MaxSize: '20'
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB # EC2 , ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber # DefaultVersionNumber , LatestVersionNumber
      Tags: 
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub "${AutoScalingGroupName}-ec2"
      TargetGroupARNs: !Ref TargetGroupARNs
      VPCZoneIdentifier: !Ref SubnetIds