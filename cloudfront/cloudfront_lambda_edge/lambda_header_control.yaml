
Parameters:
  ProjectName:
    Type: String
    Description: "The project name for provisioned this resources"
    Default: wsscc2022

  OwnerTeamName:
    Type: String
    Description: "The team name for owned this resources"
    Default: TeamKorea

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: lambda-ResponseHeaderControlFunction-role
      Description: "The role for lambda function ResponseHeaderControlFunction"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      # Policies: 
      #   - PolicyName: dynamodb-query
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'dynamodb:Query'
      #             - 'dynamodb:Scan'
      #           Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags: 
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: OwnerTeamName
          Value: !Ref OwnerTeamName

  Function:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: ResponseHeaderControlFunction
      Description: "The Lambda Function for control cloudfront response header"
      Runtime: nodejs14.x # python3.9 , nodejs14.x  ...
      Architectures: # arm64 , x86_64
        - x86_64
      PackageType: Zip # Image , Zip
      Code: 
        # S3Bucket: String
        # S3Key: String
        # S3ObjectVersion: String
        ZipFile: >
          'use strict';
          exports.handler = (event, context, callback) => {

              //Get contents of response
              const response = event.Records[0].cf.response;
              const headers = response.headers;

              //Set new headers
              headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age= 63072000; includeSubdomains; preload'}];
              headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"}];
              headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
              headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
              headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
              headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];

              //Return modified response
              callback(null, response);
          };
      Handler: index.handler
      MemorySize: 128 # MB
      Timeout: 5 # seconds
      Role: !GetAtt Role.Arn
      EphemeralStorage: 
        Size: 512 # MB
      # Environment: 
      #   Variables:  
      #     key01: value01
      # TracingConfig: 
      #   Mode: Active # Active , PassThrough
      Tags: 
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: OwnerTeamName
          Value: !Ref OwnerTeamName

  FunctionVersion:
    Type: AWS::Lambda::Version
    DependsOn: Function
    Properties: 
      # CodeSha256: String
      # Description: String
      FunctionName: !Ref Function
      # ProvisionedConcurrencyConfig: 
      #   ProvisionedConcurrentExecutions: 1
  
Outputs:
  LambdaFunctionVersionArn:
    Description: "The arn of lambda function version"
    Value: !Ref FunctionVersion