
Parameters:
  ClusterName:
    Description: 'The cluster name of eks'
    Type: String
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  #
  # IAM Role (For EKS Node Group)
  #
  Role:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: ecs-task-execution-role
      # Description: description
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
      # Policies: 
      #   - PolicyName: dynamodb-query
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'dynamodb:Query'
      #             - 'dynamodb:Scan'
      #           Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy        
      Tags: 
        - Key: key01
          Value: value01

  #
  # EC2 - Launch Template
  #
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      # LaunchTemplateName: example-eks-nodegroup-lt
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - DeviceName: /dev/xvda
            Ebs: 
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 20
              Iops: 3000
              Throughput: 125
              Encrypted: true
              # KmsKeyId: String
        # InstanceInitiatedShutdownBehavior: terminate # stop , terminate
        InstanceType: c5.xlarge
        KeyName: !Ref KeyPair
        # Monitoring: 
        SecurityGroupIds: !Ref SecurityGroupIds
        TagSpecifications: 
          - ResourceType: instance # instance, volume
            Tags: 
            - Key: Name
              Value: example-eks-node-group-ec2
          - ResourceType: volume # instance, volume
            Tags: 
            - Key: Name
              Value: example-eks-node-group-ec2
        UserData:
          Fn::Base64:
            !Sub |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="
              
              --==MYBOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              
              #!/bin/bash
              echo "Running custom user data script"

              --==MYBOUNDARY==--

  #
  # EKS - Managed Node Group
  #
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties: 
      NodegroupName: 'example-eks-nodegroup'
      AmiType: AL2_x86_64 # AL2_ARM_64 | AL2_x86_64 | AL2_x86_64_GPU | BOTTLEROCKET_ARM_64 | BOTTLEROCKET_x86_64 | CUSTOM
      CapacityType: ON_DEMAND # ON_DEMAND | SPOT
      ClusterName: !Ref ClusterName      
      ForceUpdateEnabled: false
      LaunchTemplate: 
        Id: !Ref LaunchTemplate
        # Name: String
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NodeRole: !GetAtt Role.Arn
      ScalingConfig: 
        DesiredSize: 3 # It must be defined at first time. and after that it is recommended removing.
        MinSize: 3
        MaxSize: 20
      Subnets: !Ref SubnetIds
      UpdateConfig: 
        # MaxUnavailable: 100
        MaxUnavailablePercentage: 100
      # Tags:
      #   Management: Tool
      # Labels:
      #   Management: Tool
      # Taints: 
      #   - Effect: NO_SCHEDULE # NO_EXECUTE | NO_SCHEDULE | PREFER_NO_SCHEDULE
      #     Key: Management
      #     Value: Tool
