
Parameters:
  ClusterName:
    Description: ex, example-ecs-cluster
    Type: String
  
  # TaskDefinitionArn:
  #   Description: ex, arn:aws:ecs:us-east-1:242593025403:task-definition/foo-webapp-td:2
  #   Type: String
  
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  TargetGroupArn:
    Description: ex, arn:aws:elasticloadbalancing:us-east-1:242593025403:targetgroup/foo-webapp-tg/b3cb1fa82626816d
    Type: String

Resources:
  #
  # IAM Role (for TaskExecutionRole)
  #
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: ecs-task-execution-role
      # Description: description
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      # Policies: 
      #   - PolicyName: dynamodb-query
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'logs:CreateLogGroup'
      #             - 'dynamodb:Scan'
      #           Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags: 
        - Key: key01
          Value: value01

  #
  # IAM Role (for TaskRole)
  #
  TaskRole:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: ecs-task-execution-role
      # Description: description
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies: 
        - PolicyName: Firelens-CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: '*'
      # ManagedPolicyArns: 
      #   - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags: 
        - Key: key01
          Value: value01

  #
  # CloudwatchLogs - Log Group
  #
  FirelensLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /ecs/firelens-container
      RetentionInDays: 14    

  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/ecs/containerinsights/${ClusterName}/application'
      RetentionInDays: 14

  #
  # ECS - Task Definition
  #
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    UpdateReplacePolicy: Retain
    Properties: 
      Family: foo-webapp
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc # awsvpc | bridge | host | none
      RequiresCompatibilities: # EC2 | FARGATE | EXTERNAL
        - EC2
      Cpu: 512
      Memory: 1024
      # EphemeralStorage: 
      #   EphemeralStorage
      # PlacementConstraints: 
      #   - TaskDefinitionPlacementConstraint
      # ProxyConfiguration: # app mesh
      #   ProxyConfiguration
      # RuntimePlatform: 
      #   RuntimePlatform
      # Volumes: 
      #   - Volume
      ContainerDefinitions: 
        - 
          Name: log_router
          Image: !Sub '906394416424.dkr.ecr.${AWS::Region}.amazonaws.com/aws-for-fluent-bit:stable'
          Cpu: 256
          Memory: 512
          MemoryReservation: 512
          Essential: true
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FirelensLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-stream-prefix: firelens
          FirelensConfiguration: 
            Type: fluentbit
            Options: 
              'enable-ecs-log-metadata': true
        - 
          Name: webapp
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/foo-api:v2'
          Cpu: 256
          Memory: 512
          MemoryReservation: 512
          Essential: true
          Privileged: false
          PortMappings: 
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp # tcp | udp
          HealthCheck: 
            Command: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/health || exit 1" ]
            Interval: 15
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          LogConfiguration: 
            LogDriver: awsfirelens
            Options:
              Name: cloudwatch
              region: !Ref AWS::Region
              log_group_name: !Ref ApplicationLogGroup
              log_stream_name: "$(ecs_task_id)"
          # FirelensConfiguration: 
          #   FirelensConfiguration
          # EntryPoint: 
          #   - String
          # Command: # CMD
          #   - String
          # Environment: 
          #   - KeyValuePair
          # EnvironmentFiles: 
          #   - EnvironmentFile
          # MountPoints: 
          #   - MountPoint
          # RepositoryCredentials: 
          #   RepositoryCredentials
          # Secrets: 
          #   - Secret
          # StartTimeout: Integer
          # StopTimeout: Integer
          # SystemControls: 
          #   - SystemControl
          # User: String
          # VolumesFrom: 
          #   - VolumeFrom
          # WorkingDirectory: String


  #
  # ECS -Service
  #
  Service:
    Type: AWS::ECS::Service
    Properties: 
      ServiceName: foo-webapp-service
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref TaskDefinition
      # CapacityProviderStrategy: 
      #   - Base: Integer
      #     CapacityProvider: String
      #     Weight: Integer
      DeploymentController: 
        Type: ECS # ECS | CODE_DEPLOY | EXTERNAL
      DeploymentConfiguration:  # Only *ECS
        DeploymentCircuitBreaker: 
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 3
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: EC2 # EC2 | EXTERNAL | FARGATE
      LoadBalancers: 
        - ContainerName: webapp
          ContainerPort: 5000
          # LoadBalancerName: !Ref LoadBalancerName
          TargetGroupArn: !Ref TargetGroupArn
      # HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED # DISABLED | ENABLED
          SecurityGroups: !Ref SecurityGroupIds
          Subnets: !Ref SubnetIds
      # PlacementConstraints: 
      #   - PlacementConstraint
      # PlacementStrategies: 
      #   - PlacementStrategy
      # PlatformVersion: String
      # PropagateTags: String
      # Role: String
      # SchedulingStrategy: String
      # ServiceRegistries: # CloudMap
      #   - ServiceRegistry
      
  #
  # Application Auto Scaling - Scalable Target
  #
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 60
      MinCapacity: 3
      ResourceId: !Join ['/', ['service', !Ref ClusterName, !GetAtt Service.Name]]
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      # ScheduledActions: 
      #   - ScheduledAction
      ServiceNamespace: ecs
      # SuspendedState: 
      #   SuspendedState
  
  #
  # Application Auto Scaling - ScalingPolicy
  #
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECS-TargetTracking-ScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 60.0