
Parameters:
  SecretManagerArn:
    Description: ex, arn:aws:secretsmanager:us-east-1:242593025403:secret:rds/aurora-mysql-serverless/admin-3SUq26
    Type: String
  
  ParameterStoreName:
    Description: ex, example-secure-string
    Type: String

Resources:
  #
  # IAM Role (for TaskExecutionRole)
  #
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: ecs-task-execution-role
      # Description: description
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Policies:
        - 
          PolicyName: SecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref SecretManagerArn
        - 
          PolicyName: ParameterStore
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterStoreName}'
        -
          PolicyName: DecryptKMS # it is needed if you use CMK which does not use Managed KMS Key
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource: 
                  - 'arn:aws:kms:<region>:<aws_account_id>:key/<key_id>'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags: 
        - Key: key01
          Value: value01

  #
  # IAM Role (for TaskRole)
  #
  TaskRole:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: ecs-task-execution-role
      # Description: description
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      # Policies: 
      #   - PolicyName: dynamodb-query
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - 'dynamodb:Query'
      #             - 'dynamodb:Scan'
      #           Resource: '*'
      # ManagedPolicyArns: 
      #   - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags: 
        - Key: key01
          Value: value01

  #
  # CloudwatchLogs - Log Group
  #
  CloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /ecs/application/ubuntu-sleep
      RetentionInDays: 14

  #
  # ECS - Task Definition
  #
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    UpdateReplacePolicy: Retain
    Properties: 
      Family: ubuntu-sleep
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc # awsvpc | bridge | host | none
      RequiresCompatibilities: # EC2 | FARGATE | EXTERNAL
        - FARGATE
      Cpu: 256
      Memory: 512
      ContainerDefinitions: 
        - 
          Name: ubuntu
          Image: !Sub 'public.ecr.aws/lts/ubuntu:22.04_stable'
          Cpu: 256
          Memory: 512
          MemoryReservation: 512
          Essential: true
          Privileged: false
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          EntryPoint: [ "/usr/bin/env" ]
          Secrets: # Get Secrets from parameter store and secrets-manager
            - Name: secretsmanager
              ValueFrom: !Ref SecretManagerArn
            - Name: parameterstore
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterStoreName}'